apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ template "patroni.fullname" . }}
  labels: {{ include "patroni.labels" . | nindent 4 }}
spec:
  serviceName: {{ template "patroni.fullname" . }}
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels: {{ include "patroni.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      name: {{ template "patroni.fullname" . }}
      labels: {{ include "patroni.labels" . | nindent 8 }}
    spec:
      serviceAccountName: {{ template "patroni.serviceAccountName" . }}
      containers:
      - name: {{ .Chart.Name }}
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        # see https://patroni.readthedocs.io/en/latest/rest_api.html#health-check-endpoints
        readinessProbe:
          httpGet:
            scheme: HTTP
            path: /readiness
            port: 8008
          initialDelaySeconds: 3
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        livenessProbe:
          httpGet:
            scheme: HTTP
            path: /liveness
            port: 8008
          initialDelaySeconds: 3
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        env:
        - name: PGVERSION
          value: {{ .Values.postgresMajorVersion | quote }}
        {{- if .Values.allowNoSSL }}
        - name: ALLOW_NOSSL
          value: "true"
        {{- end }}
        - name: PGUSER_SUPERUSER
          valueFrom:
            secretKeyRef:
              name: {{ if .Values.credentials.existingSecret }}{{ .Values.credentials.existingSecret }}{{ else }}{{ template "patroni.fullname" . }}{{ end }}
              key: username-superuser
        - name: PGUSER_ADMIN
          valueFrom:
            secretKeyRef:
              name: {{ if .Values.credentials.existingSecret }}{{ .Values.credentials.existingSecret }}{{ else }}{{ template "patroni.fullname" . }}{{ end }}
              key: username-admin
        - name: PGUSER_STANDBY
          valueFrom:
            secretKeyRef:
              name: {{ if .Values.credentials.existingSecret }}{{ .Values.credentials.existingSecret }}{{ else }}{{ template "patroni.fullname" . }}{{ end }}
              key: username-standby
        - name: PGPASSWORD_SUPERUSER
          valueFrom:
            secretKeyRef:
              name: {{ if .Values.credentials.existingSecret }}{{ .Values.credentials.existingSecret }}{{ else }}{{ template "patroni.fullname" . }}{{ end }}
              key: password-superuser
        - name: PGPASSWORD_ADMIN
          valueFrom:
            secretKeyRef:
              name: {{ if .Values.credentials.existingSecret }}{{ .Values.credentials.existingSecret }}{{ else }}{{ template "patroni.fullname" . }}{{ end }}
              key: password-admin
        - name: PGPASSWORD_STANDBY
          valueFrom:
            secretKeyRef:
              name: {{ if .Values.credentials.existingSecret }}{{ .Values.credentials.existingSecret }}{{ else }}{{ template "patroni.fullname" . }}{{ end }}
              key: password-standby
        - name: KUBERNETES_ROLE_LABEL
          value: {{ .Values.kubernetes.roleLabel }}
        {{- if .Values.kubernetes.dcs.enable }}
        - name: DCS_ENABLE_KUBERNETES_API
          value: "true"
        - name: KUBERNETES_LABELS
          value: {{ (printf "{ \"app.kubernetes.io/name\": \"%s\", \"app.kubernetes.io/instance\": \"%s\" }" (include "patroni.name" .) .Release.Name) | quote }}
        - name: KUBERNETES_SCOPE_LABEL
          value: "app.kubernetes.io/instance"
        {{- if .Values.kubernetes.configmaps.enable }}
        - name: KUBERNETES_USE_CONFIGMAPS
          value: "true"
        {{- end }}
        {{- end }}
        {{- if .Values.etcd.enable }}
        {{- if .Values.etcd.deployChart }}
        - name: ETCD_DISCOVERY_DOMAIN
          value: {{default (printf "%s-etcd" .Release.Name | trunc 63) .Values.etcd.discovery }}
        {{- else }}
        - name: ETCD_HOST
          value: {{ .Values.etcd.host | quote }}
        {{- end }}
        {{- else if .Values.zookeeper.enable }}
        {{- if .Values.zookeeper.deployChart }}
        - name: ZOOKEEPER_HOSTS
          value: {{(printf "'%s-zookeeper-headless:2181'" .Release.Name | trunc 63)}}
        {{- else }}
        - name: ZOOKEEPER_HOSTS
          value: {{ .Values.zookeeper.hosts | quote }}
        {{- end }}
        {{- else if .Values.consul.enable }}
        {{- if .Values.consul.deployChart }}
        - name: PATRONI_CONSUL_HOST
          value: {{(printf "'%s-consul'" .Release.Name | trunc 63)}}
        {{- else }}
        - name: PATRONI_CONSUL_HOST
          value: {{ .Values.consul.host | quote }}
        {{- end }}
        {{- end }}
        - name: SCOPE
          value: {{ .Release.Name }}
        {{- if .Values.standby.enabled }}
        - name: STANDBY_HOST
          value: {{ .Values.standby.host | quote }}
        - name: STANDBY_PORT
          value: {{ .Values.standby.port | quote }}
        {{- end }}
        # WAL-G storage configuration
        - name: USE_WALE
          value: ""
        {{- if .Values.walG.enabled }}
        - name: USE_WALG
          value: 'true'
        - name: USE_WALG_BACKUP
          value: 'true'
        - name: USE_WALG_RESTORE
          value: 'true'
        {{- if .Values.walG.scheduleCronJob }}
        - name: BACKUP_SCHEDULE
          value: {{ .Values.walG.scheduleCronJob | quote}}
        {{- end }}
        {{- if .Values.walG.retainBackups }}
        - name: BACKUP_NUM_TO_RETAIN
          value: {{ .Values.walG.retainBackups | quote}}
        {{- end }}
        {{- if .Values.walG.backupThresholdMegabytes }}
        - name: WALE_BACKUP_THRESHOLD_MEGABYTES
          value: {{ .Values.walG.backupThresholdMegabytes | quote}}
        {{- end }}
        {{- if .Values.walG.backupThresholdPercentage }}
        - name: WALE_BACKUP_THRESHOLD_PERCENTAGE
          value: {{ .Values.walG.backupThresholdPercentage | quote}}
        {{- end }}
        {{- if eq .Values.walG.storage "pvc"}}
        - name: WALG_FILE_PREFIX
          value: {{ .Values.walG.pvc.mountPath }}
        {{- end }}
        {{- end }}
        - name: PGROOT
          value: "{{ .Values.persistentVolume.mountPath }}/pgroot"
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        {{- if .Values.env }}
        {{- range $key, $val := .Values.env }}
        - name: {{  $key | quote | upper }}
          value: {{ $val | quote }}
        {{- end }}
        {{- end }}
        ports:
        - containerPort: 8008
        - containerPort: 5432
        volumeMounts:
        - name: storage-volume
          mountPath: "{{ .Values.persistentVolume.mountPath }}"
          subPath: "{{ .Values.persistentVolume.subPath }}"
        - mountPath: /etc/patroni
          name: patroni-config
          readOnly: true
        {{- if and (.Values.walG.enabled) (eq .Values.walG.storage "pvc") }}
        - mountPath: {{ .Values.walG.pvc.mountPath }}
          name: backups-volume
        {{- end }}
        resources:
{{ toYaml .Values.resources | indent 10 }}
    {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- if .Values.schedulerName }}
      schedulerName: {{ .Values.schedulerName }}
    {{- end }}
    {{- if .Values.affinity }}
      affinity:
{{ .Values.affinity | toYaml | indent 8 }}
    {{- else if .Values.affinityTemplate }}
      affinity:
{{ tpl .Values.affinityTemplate . | indent 8 }}
    {{- end }}
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      volumes:
      - name: patroni-config
        secret:
          secretName: {{ template "patroni.fullname" . }}
      {{- if not .Values.persistentVolume.enabled }}
      - name: storage-volume
        emptyDir: {}
      {{- end }}
      {{- if and (.Values.walG.enabled) (eq .Values.walG.storage "pvc") }}
      - name: backups-volume
        persistentVolumeClaim:
          claimName: {{ template "patroni.fullname" . }}-backups
      {{- end }}
  {{- if .Values.persistentVolume.enabled }}
  volumeClaimTemplates:
    - metadata:
        name: storage-volume
        annotations:
        {{- if .Values.persistentVolume.annotations }}
{{ toYaml .Values.persistentVolume.annotations | indent 8 }}
        {{- end }}
        # https://github.com/helm/helm/issues/7998
        # Let's use more generic labels to make future updates flexible; otherwise it will hit an error like below:
        # Error "Forbidden: updates to statefulset spec for fields other than 'replicas', 'template', and 'updateStrategy' are forbidden" for field "spec".
        labels: {{ include "patroni.selectorLabels" . | nindent 10 }}
      spec:
        accessModes:
{{ toYaml .Values.persistentVolume.accessModes | indent 8 }}
        resources:
          requests:
            storage: "{{ .Values.persistentVolume.size }}"
      {{- if .Values.persistentVolume.storageClass }}
      {{- if (eq "-" .Values.persistentVolume.storageClass) }}
        storageClassName: ""
      {{- else }}
        storageClassName: "{{ .Values.persistentVolume.storageClass }}"
      {{- end }}
      {{- end }}
  {{- end }}
